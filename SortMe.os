

//Список библиотек, используемых для работы скрипта.
#Использовать ReadParams

//Переменные
Перем Каталог;
Перем МассивМасокИзображения;
Перем МассивМасокВидео;
Перем НастройкиУспешноПрочитаны;

//Читаем настройки из файла по умолчанию
Процедура ПрочитатьНастройкиПоУмолчанию()
	
	СообщениеОбОшибке 			= "Файл настроек невозможно прочитать. Работа скрипта завершена.";
	НастройкиУспешноПрочитаны 	= Ложь;
	
	Если НЕ АргументыКоманднойСтроки.Количество() Тогда
		Сообщить(СообщениеОбОшибке + "|Для корректной работы необходимо задать аргументы командной строки.", 
		СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;				
	
	ПутьКФайлуНастроек = Строка(АргументыКоманднойСтроки[0]);
	Если ЗначениеЗаполнено(ПутьКФайлуНастроек) Тогда
		НастройкиИзФайла = ЧтениеПараметров.Прочитать(ПутьКФайлуНастроек);
		Если ТипЗнч(НастройкиИзФайла) = Тип("Соответствие") Тогда
			Каталог 				= НастройкиИзФайла.Получить("Каталог");
			МассивМасокИзображения 	= НастройкиИзФайла.Получить("МассивМасокИзображения");
			МассивМасокВидео 		= НастройкиИзФайла.Получить("МассивМасокВидео");
			НастройкиУспешноПрочитаны = Истина;
		Иначе
			Сообщить(СообщениеОбОшибке + "|Ошибка чтения файла настроек. Необходимо проверить корректность структуры файла", 
			СтатусСообщения.Важное);
			Возврат;		
		КонецЕсли;	
	Иначе	
		Сообщить(СообщениеОбОшибке + "|Указан некорректный путь к файлу настроек.",
		СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры	

Функция НастройкиИзФайлаВведеныКорректно()
	
	ДанныеПроверки = Новый Структура("ПроверкаВыполненаУспешно, РезультатПроверки", Истина, "");
	
	Если НЕ ЗначениеЗаполнено(Каталог) Тогда
		ДанныеПроверки.ПроверкаВыполненаУспешно = Ложь;
		ДанныеПроверки.РезультатПроверки = "Не указан исходный каталог, работа скрипта будет завершена";
		Возврат ДанныеПроверки;
	КонецЕсли;
	
	Возврат ДанныеПроверки;
	
КонецФункции

Функция МесяцПрописьюПоДате(НомерМесяца)
	
	Если НомерМесяца = 1 Тогда
		Возврат "Январь";
	ИначеЕсли НомерМесяца = 2 Тогда
		Возврат "Февраль";
	ИначеЕсли НомерМесяца = 3 Тогда
		Возврат "Март";
	ИначеЕсли НомерМесяца = 4 Тогда
		Возврат "Апрель";
	ИначеЕсли НомерМесяца = 5 Тогда
		Возврат "Май";
	ИначеЕсли НомерМесяца = 6 Тогда
		Возврат "Июнь";
	ИначеЕсли НомерМесяца = 7 Тогда
		Возврат "Июль";
	ИначеЕсли НомерМесяца = 8 Тогда
		Возврат "Август";
	ИначеЕсли НомерМесяца = 9 Тогда
		Возврат "Сентябрь";
	ИначеЕсли НомерМесяца = 10 Тогда
		Возврат "Октябрь";
	ИначеЕсли НомерМесяца =	11 Тогда
		Возврат "Ноябрь";
	ИначеЕсли НомерМесяца = 12 Тогда
		Возврат "Декабрь";
	Иначе
		Возврат "Неопределено";											
	КонецЕсли;
	
КонецФункции

Процедура ЗапуститьСортировкуФайловВПапке()
	
	ДанныеПроверки = НастройкиИзФайлаВведеныКорректно();
	Если НЕ ДанныеПроверки.ПроверкаВыполненаУспешно Тогда
		Сообщить(ДанныеПроверки.РезультатПроверки, СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Сообщить("Запускаем процесс сортировки фотографий и видеофайлов в каталоге: " + Каталог, СтатусСообщения.Информация);

	//Обработка изображений
	Сообщить("Начинаем обработку изображений", СтатусСообщения.Информация);
	Если ТипЗнч(МассивМасокИзображения) = Тип("Массив") И МассивМасокИзображения.Количество() Тогда
		Для каждого МаскаИзображение Из МассивМасокИзображения Цикл
			НайтиФайлыИОтсортироватьИх(МаскаИзображение, "Изображения");
		КонецЦикла;
	Иначе
		НайтиФайлыИОтсортироватьИх("*.*", "Изображения"); ///
	КонецЕсли;

	//Обработка видео
	Сообщить("Начинаем обработку видео", СтатусСообщения.Информация);
	Если ТипЗнч(МассивМасокВидео) = Тип("Массив") И МассивМасокВидео.Количество() Тогда
		Для каждого МаскаВидео Из МассивМасокВидео Цикл
			НайтиФайлыИОтсортироватьИх(МаскаВидео, "Видео");
		КонецЦикла;
	Иначе
		НайтиФайлыИОтсортироватьИх("*.*", "Видео");
	КонецЕсли;
	
КонецПроцедуры	

Процедура НайтиФайлыИОтсортироватьИх(Маска, ТипОбработки)

	Если НЕ ЗначениеЗаполнено(ТипОбработки) Тогда
		Возврат;
	КонецЕсли;	
	
	КаталогНаДискеПуть = ПроверитьСоздатьКаталог(Каталог + "\Sorted", "Создан каталог для отсортированных файлов");

	Если ТипОбработки = "Изображения" Тогда
		Префикс = "ИЗ";
		КаталогСИзображениямиПуть = ПроверитьСоздатьКаталог(КаталогНаДискеПуть + "\Photo", "Создан каталог для изображений");
	КонецЕсли;	
	
	Если ТипОбработки = "Видео" Тогда
		Префикс = "ВД";
		КаталогСВидеоПуть = ПроверитьСоздатьКаталог(КаталогНаДискеПуть + "\Video", "Создан каталог для видео");
	КонецЕсли;

	Счетчик = 1;
	МассивФайлов = НайтиФайлы(Каталог, Маска, Истина);
	Для каждого Файл Из МассивФайлов Цикл
		Если НЕ Файл.ЭтоФайл() Тогда
			Сообщить("Файл:" + Файл.Имя + " является каталогом и будет пропущен", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Сообщить("Обрабатывается файл: " + Файл.Имя + " Путь: " + Файл.Путь, СтатусСообщения.Внимание);

		ДатаДляОбработки 	= Файл.ПолучитьВремяИзменения();
		Год 				= Год(ДатаДляОбработки);
		МесяцСтрокой 		= МесяцПрописьюПоДате(Месяц(ДатаДляОбработки));

		КаталогГодПуть = ПроверитьСоздатьКаталог(?(ТипОбработки = "Изображения", КаталогСИзображениямиПуть, КаталогСВидеоПуть) 
		+ "\" + Строка(Год), 
		"Создан каталог на: " + Строка(Год) + " год");

		КаталогМесяцПуть = ПроверитьСоздатьКаталог(КаталогГодПуть + "\" + Строка(МесяцСтрокой), 
		"Создан каталог за: " + Строка(МесяцСтрокой) + " месяц");
		
		ПереместитьФайл(Файл.ПолноеИмя, ?(ТипОбработки = "Изображения", КаталогСИзображениямиПуть, КаталогСВидеоПуть) 
				+ "\" + Строка(Год) + "\" + МесяцСтрокой + "\" + Строка(Счетчик) + "_" + Префикс + "_" + Файл.Имя);

		Счетчик = Счетчик + 1;

	КонецЦикла;
	
КонецПроцедуры	

Функция ПроверитьСоздатьКаталог(ЗНАЧ Путь, ТекстСообщения)

	КаталогНаДиске = Новый Файл(Путь);
    Если НЕ КаталогНаДиске.Существует() Тогда
		СоздатьКаталог(Путь);
		Сообщить(ТекстСообщения, СтатусСообщения.Информация);
		Возврат Путь;
    КонецЕсли;

	Возврат КаталогНаДиске.ПолноеИмя;

КонецФункции	

ПрочитатьНастройкиПоУмолчанию();
Если НастройкиУспешноПрочитаны Тогда
	ЗапуститьСортировкуФайловВПапке();
	Сообщить("Работа скрипта завершена");
КонецЕсли;	



